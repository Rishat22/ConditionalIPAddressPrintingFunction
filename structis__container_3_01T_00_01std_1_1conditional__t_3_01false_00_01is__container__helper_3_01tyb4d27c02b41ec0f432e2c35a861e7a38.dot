digraph "is_container&lt; T, std::conditional_t&lt; false, is_container_helper&lt; typename T::value_type, typename T::size_type, typename T::allocator_type, typename T::iterator, typename T::const_iterator, decltype(std::declval&lt; T &gt;().size()), decltype(std::declval&lt; T &gt;().begin()), decltype(std::declval&lt; T &gt;().end()), decltype(std::declval&lt; T &gt;().cbegin()), decltype(std::declval&lt; T &gt;().cend()) &gt;, void &gt; &gt;"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="is_container\< T, std\l::conditional_t\< false,\l is_container_helper\< typename\l T::value_type, typename T::\lsize_type, typename T::allocator\l_type, typename T::iterator, typename\l T::const_iterator, decltype(std::declval\l\< T \>().size()), decltype(std::declval\<\l T \>().begin()), decltype(std::declval\< T\l \>().end()), decltype(std::declval\< T \>().cbegin\l()), decltype(std::declval\< T \>().cend()) \>, void \> \>",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="std::true_type",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
}
